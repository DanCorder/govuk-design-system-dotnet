@model GovUkDesignSystem.GovUkDesignSystemComponents.TableGovUkViewModel
@using GovUkDesignSystem.GovUkDesignSystemComponents.Enums

@if (Model != null)
{
    <table class="govuk-table @Model?.Classes" @(Html.Raw(Model.Attributes != null ? string.Join(" ", Model.Attributes.Select(a => a.Key + "=\"" + a.Value + "\"")) : ""))>

        @if (!string.IsNullOrEmpty(Model.Caption))
        {
            <caption class="govuk-table__caption @Model?.CaptionClasses">@Model.Caption</caption>
        }

        @if (Model.Head.Count > 0)
        {
            <thead class="govuk-table__head">
                <tr class="govuk-table__row">
                    @for (int cellIndex = 0; cellIndex < Model.Head.Count; cellIndex++)
                    {
                        string colSpan = Model.Head[cellIndex].Colspan != null ? "colspan=" + Model.Head[cellIndex].Colspan : string.Empty;
                        string rowSpan = Model.Head[cellIndex].Rowspan != null ? "rowspan=" + Model.Head[cellIndex].Rowspan : string.Empty;
                        string tableHeadCellClasses = $"govuk-table__header " + $"{(Model.Head[cellIndex].Format != null && Model.Head[cellIndex].Format == Format.Numeric ? "govuk-table__header--numeric " : string.Empty)}" + $"{(String.IsNullOrEmpty(Model.Head[cellIndex].Classes) ? string.Empty : Model.Head[cellIndex].Classes)}";
                        <th scope="col" class="@tableHeadCellClasses" @colSpan @rowSpan @(Html.Raw(Model.Head[cellIndex].Attributes != null ? string.Join(" ", Model.Head[cellIndex].Attributes.Select(a => a.Key + "=\"" + a.Value + "\"")) : ""))>
                            @{
                                await Html.RenderPartialAsync("/GovUkDesignSystemComponents/SubComponents/HtmlText.cshtml", Model.Head[cellIndex]);
                            }
                        </th>
                    }
                </tr>
            </thead>
        }

        @if (Model.Rows.Count > 0)
        {
            <tbody class="govuk-table__body">
                @foreach (var row in Model.Rows)
                {
                    <tr class="govuk-table__row">
                        @foreach (var column in row.Row)
                        {
                            string colSpan = column.Colspan != null ? "colspan=" + column.Colspan : string.Empty;
                            string rowSpan = column.Rowspan != null ? "rowspan=" + column.Rowspan : string.Empty;
                            string tableBodyCellClasses = $"{(column == row.Row.First() ? "govuk-table__header " : "govuk-table__cell ")} " + $"{(column.Format!= null && column.Format == Format.Numeric ? "govuk-table__cell--numeric " : string.Empty)}" + $"{(String.IsNullOrEmpty(column.Classes) ? string.Empty : column.Classes)}";

                            if (column == row.Row.First() && Model.FirstCellIsHeader)
                            {
                                <th scope="row" class="@tableBodyCellClasses" @colSpan @rowSpan @(Html.Raw(column.Attributes != null ? string.Join(" ", column.Attributes.Select(a => a.Key + "=\"" + a.Value + "\"")) : ""))>
                                    @{
                                        await Html.RenderPartialAsync("/GovUkDesignSystemComponents/SubComponents/HtmlText.cshtml", column);
                                    }
                                </th>
                            }
                            else
                            {
                                <td class="@tableBodyCellClasses" @colSpan @rowSpan @(Html.Raw(column.Attributes != null ? string.Join(" ", column.Attributes.Select(a => a.Key + "=\"" + a.Value + "\"")) : ""))>
                                    @{
                                        await Html.RenderPartialAsync("/GovUkDesignSystemComponents/SubComponents/HtmlText.cshtml", column);
                                    }
                                </td>
                            }
                        }
                    </tr>
                }
            </tbody>
        }
    </table>
}